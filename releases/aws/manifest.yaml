apiVersion: cert-manager.io/v1
kind: Issuer
metadata:
  name: karpenter-selfsigned-issuer
  namespace: karpenter
spec:
  selfSigned: {}
---
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: karpenter-serving-cert
  namespace: karpenter
spec:
  dnsNames:
    - karpenter-webhook-service.karpenter.svc
    - karpenter-webhook-service.karpenter.svc.cluster.local
  issuerRef:
    kind: Issuer
    name: karpenter-selfsigned-issuer
  secretName: karpenter-webhook-server-cert # this secret will not be prefixed, since it's not managed by kustomize

---
apiVersion: v1
kind: Service
metadata:
  name: karpenter-webhook-service
  namespace: karpenter
  labels:
    control-plane: karpenter
spec:
  ports:
    - port: 443
      targetPort: webhook
  selector:
    control-plane: karpenter
---
apiVersion: v1
kind: Service
metadata:
  name: karpenter-metrics-service
  namespace: karpenter
  labels:
    control-plane: karpenter
spec:
  ports:
    - name: http
      port: 8080
      targetPort: metrics
  selector:
    control-plane: karpenter
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: karpenter
  namespace: karpenter
  labels:
    control-plane: karpenter
spec:
  selector:
    matchLabels:
      control-plane: karpenter
  replicas: 1
  template:
    metadata:
      labels:
        control-plane: karpenter
    spec:
      serviceAccountName: karpenter
      containers:
        - name: manager
          image: public.ecr.aws/b6u6q9h4/controller:v0.1.3@sha256:f9c28aeeb6c80b1c768eb2123946c15fe24fdf10f1227d3a5df3b01137eaa1cb
          resources:
            limits:
              cpu: 100m
              memory: 30Mi
            requests:
              cpu: 100m
              memory: 20Mi
          ports:
            - name: webhook
              containerPort: 9443
              protocol: TCP
            - name: metrics
              containerPort: 8080
          volumeMounts:
            - mountPath: /tmp/k8s-webhook-server/serving-certs
              name: cert
              readOnly: true
      # https://github.com/aws/amazon-eks-pod-identity-webhook/issues/8#issuecomment-636888074
      securityContext:
        fsGroup: 1000
      volumes:
        - name: cert
          secret:
            defaultMode: 420
            secretName: karpenter-webhook-server-cert

---
apiVersion: monitoring.coreos.com/v1
kind: Prometheus
metadata:
  name: karpenter-monitor
  namespace: karpenter
spec:
  replicas: 1
  serviceMonitorSelector:
    matchLabels:
      control-plane: karpenter
---
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  labels:
    control-plane: karpenter
  name: karpenter-metrics-monitor
  namespace: karpenter
spec:
  endpoints:
    - path: /metrics
      port: http
      interval: 5s
      scheme: http
  selector:
    matchLabels:
      control-plane: karpenter
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  name: karpenter-metrics-reader
rules:
  - nonResourceURLs: ["/metrics"]
    verbs: ["get"]
  - apiGroups:
      - ""
    resources:
      - services
      - endpoints
    verbs:
      - get
      - list
      - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: karpenter-metrics
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: karpenter-metrics-reader
subjects:
  - kind: ServiceAccount
    name: default
    namespace: karpenter

---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.4.0
  creationTimestamp: null
  name: provisioners.provisioning.karpenter.sh
spec:
  group: provisioning.karpenter.sh
  names:
    kind: Provisioner
    listKind: ProvisionerList
    plural: provisioners
    singular: provisioner
  scope: Namespaced
  versions:
    - name: v1alpha1
      schema:
        openAPIV3Schema:
          description: Provisioner is the Schema for the Provisioners API
          properties:
            apiVersion:
              description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
              type: string
            kind:
              description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
              type: string
            metadata:
              type: object
            spec:
              description: ProvisionerSpec is the top level provisioner specification. Provisioners launch nodes in response to pods where status.conditions[type=unschedulable, status=true]. Node configuration is driven by through a combination of provisioner specification (defaults) and pod scheduling constraints (overrides). A single provisioner is capable of managing highly diverse capacity within a single cluster and in most cases, only one should be necessary. For advanced use cases like workload separation and sharding, it's possible to define multiple provisioners. These provisioners may have different defaults and can be specifically targeted by pods using pod.spec.nodeSelector["provisioning.karpenter.sh/name"]=$PROVISIONER_NAME.
              properties:
                architecture:
                  description: Architecture constraints the underlying node architecture
                  type: string
                cluster:
                  description: ClusterSpec configures the cluster that the provisioner operates against. If not specified, it will default to using the controller's kube-config.
                  properties:
                    caBundle:
                      description: CABundle is required for nodes to verify API Server certificates.
                      type: string
                    endpoint:
                      description: Endpoint is required for nodes to connect to the API Server.
                      type: string
                    name:
                      description: Name is required to detect implementing cloud provider resources.
                      type: string
                  required:
                    - caBundle
                    - endpoint
                    - name
                  type: object
                instanceTypes:
                  description: InstanceTypes constraints which instances types will be used for nodes launched by the Provisioner. If unspecified, supports all types. Cannot be specified if label "node.kubernetes.io/instance-type" is specified.
                  items:
                    type: string
                  type: array
                labels:
                  additionalProperties:
                    type: string
                  description: Labels will be applied to every node launched by the Provisioner unless overriden by pod node selectors. Well known labels control provisioning behavior. Additional labels may be supported by your cloudprovider.
                  type: object
                operatingSystem:
                  description: OperatingSystem constrain the underlying node operating system
                  type: string
                taints:
                  description: Taints will be applied to every node launched by the Provisioner. If specified, the provisioner will not provision nodes for pods that do not have matching tolerations.
                  items:
                    description: The node this Taint is attached to has the "effect" on any pod that does not tolerate the Taint.
                    properties:
                      effect:
                        description: Required. The effect of the taint on pods that do not tolerate the taint. Valid effects are NoSchedule, PreferNoSchedule and NoExecute.
                        type: string
                      key:
                        description: Required. The taint key to be applied to a node.
                        type: string
                      timeAdded:
                        description: TimeAdded represents the time at which the taint was added. It is only written for NoExecute taints.
                        format: date-time
                        type: string
                      value:
                        description: The taint value corresponding to the taint key.
                        type: string
                    required:
                      - effect
                      - key
                    type: object
                  type: array
                ttlSeconds:
                  description: TTLSeconds determines how long to wait before attempting to terminate a node.
                  format: int32
                  type: integer
                zones:
                  description: Zones constrains where nodes will be launched by the Provisioner. If unspecified, defaults to all zones in the region. Cannot be specified if label "topology.kubernetes.io/zone" is specified.
                  items:
                    type: string
                  type: array
              type: object
            status:
              description: ProvisionerStatus defines the observed state of Provisioner
              properties:
                conditions:
                  description: Conditions is the set of conditions required for this provisioner to scale its target, and indicates whether or not those conditions are met.
                  items:
                    description: 'Conditions defines a readiness condition for a Knative resource. See: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#typical-status-properties'
                    properties:
                      lastTransitionTime:
                        description: LastTransitionTime is the last time the condition transitioned from one status to another. We use VolatileTime in place of metav1.Time to exclude this from creating equality.Semantic differences (all other things held constant).
                        type: string
                      message:
                        description: A human readable message indicating details about the transition.
                        type: string
                      reason:
                        description: The reason for the condition's last transition.
                        type: string
                      severity:
                        description: Severity with which to treat failures of this type of condition. When this is not specified, it defaults to Error.
                        type: string
                      status:
                        description: Status of the condition, one of True, False, Unknown.
                        type: string
                      type:
                        description: Type of condition.
                        type: string
                    required:
                      - status
                      - type
                    type: object
                  type: array
                lastScaleTime:
                  description: LastScaleTime is the last time the Provisioner scaled the number of nodes
                  type: string
              type: object
          type: object
      served: true
      storage: true
      subresources:
        status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: karpenter
  namespace: karpenter
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: karpenter
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: karpenter
subjects:
  - kind: ServiceAccount
    name: karpenter
    namespace: karpenter
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: karpenter-leader-election
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: karpenter-leader-election
subjects:
  - kind: ServiceAccount
    name: karpenter
    namespace: karpenter
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: karpenter-leader-election
rules:
  - apiGroups:
      - ""
    resources:
      - configmaps
    verbs:
      - get
      - list
      - watch
      - create
      - update
      - patch
      - delete
  - apiGroups:
      - ""
    resources:
      - configmaps/status
    verbs:
      - get
      - update
      - patch
  - apiGroups:
      - ""
    resources:
      - events
    verbs:
      - create
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: karpenter
rules:
  - apiGroups:
      - provisioning.karpenter.sh
    resources:
      - provisioners
      - provisioners/status
    verbs:
      - create
      - delete
      - patch
      - get
      - list
      - patch
      - watch
  - apiGroups:
      - coordination.k8s.io
    resources:
      - leases
    verbs:
      - create
      - get
      - patch
      - update
      - watch
  - apiGroups:
      - ""
    resources:
      - nodes
      - pods
    verbs:
      - get
      - list
      - watch
      - patch
      - delete
  - apiGroups:
      - ""
    resources:
      - configmaps
    verbs:
      - get
      - list
      - watch
      - update
  - apiGroups:
      - ""
    resources:
      - nodes
    verbs:
      - create
  - apiGroups:
      - ""
    resources:
      - pods/binding
      - pods/eviction
    verbs:
      - create
  - apiGroups:
      - apps
    resources:
      - daemonsets
    verbs:
      - list
      - watch

---
apiVersion: admissionregistration.k8s.io/v1
kind: MutatingWebhookConfiguration
metadata:
  creationTimestamp: null
  name: karpenter-mutating-webhook-configuration
  annotations:
    cert-manager.io/inject-ca-from: karpenter/karpenter-serving-cert
webhooks:
  - admissionReviewVersions:
      - v1beta1
    clientConfig:
      caBundle: Cg==
      service:
        name: karpenter-webhook-service
        namespace: karpenter
        path: /mutate-provisioning-karpenter-sh-v1alpha1-provisioner
    failurePolicy: Fail
    name: mutation.provisioning.karpenter.sh
    rules:
      - apiGroups:
          - provisioning.karpenter.sh
        apiVersions:
          - v1alpha1
        operations:
          - CREATE
          - UPDATE
        resources:
          - provisioners
    sideEffects: None
---
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingWebhookConfiguration
metadata:
  creationTimestamp: null
  name: karpenter-validating-webhook-configuration
  annotations:
    cert-manager.io/inject-ca-from: karpenter/karpenter-serving-cert
webhooks:
  - admissionReviewVersions:
      - v1beta1
    clientConfig:
      caBundle: Cg==
      service:
        name: karpenter-webhook-service
        namespace: karpenter
        path: /validate-provisioning-karpenter-sh-v1alpha1-provisioner
    failurePolicy: Fail
    name: validation.provisioning.karpenter.sh
    rules:
      - apiGroups:
          - provisioning.karpenter.sh
        apiVersions:
          - v1alpha1
        operations:
          - CREATE
          - UPDATE
        resources:
          - provisioners
    sideEffects: None

---
